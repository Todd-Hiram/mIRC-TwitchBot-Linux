/* For this you need to set up a client_id for your bot.
To do that, follow the instuctions found here: https://blog.twitch.tv/client-id-required-for-kraken-api-calls-afbb8e95f843#.8bxozt92o
You should input the client_id where I put [place client id here]. You only need one bot client id to make the uptime command work.
*/
[script]
n0=alias twitchuptime {
n1=  if ($mysocket(twitchuptime1,https://api.twitch.tv/kraken/streams?channel= $+ $1 $+ &client_id=nkg9i5xu8nbm6ecn5ko6qupzvm92sy2)) {
n2=    hadd $v1 channel $2
n3=    hadd $v1 stream $1
n4=    return 1
n5=  }
n6=}
n7=alias twitchuptime1 {
n8=  if ($2 == error) { /set %uptime An error occurred, please try again. }
n9=  else {
n10=    if ($bfind(&mysocket,1,"_total":0).text)  { /set %uptime Offline }
n11=    elseif ($bfind(&mysocket,1,created_at).text) { 
n12=      /set %uptime $duration($calc($calc($gmt -$ctime($replacex($gettok($bvar(&mysocket,$v1,100).text,3,34),T,$chr(32))))))
n13=    }
n14=  }
n15=}
n16=
n17=alias mysocket {
n18=  if (www.?*.??* iswm $2) tokenize 32 $1 http:// $+ $2
n19=  if (http://?*.??* iswm $2) || (https://?*.??* iswm $2) {
n20=    var %e = $iif($gettok($2,1,47) == https:,-e),%a $gettok($2,2,47),%p $iif($gettok(%a,2,58) isnum 60-65535,$v1,$iif(%e,443,80)),%a $gettok(%a,1,58),%s $sha1($2,0) $+ .mysocket
n21=    mysocket.k %s
n22=    hmake %s
n23=    hadd %s command $1
n24=    hadd %s full $2
n25=    hadd %s port %p
n26=    hadd %s host %a
n27=    hadd %s path $iif($gettok($2,3-,47),/ $+ $v1 $+ $iif($right($2,1) == /,/),/)
n28=    hadd %s limit 2097152
n29=    hadd %s r 0
n30=    sockopen %e %s %a %p
n31=    .timermysocket. $+ %s -io 0 30 mysocket.t %s
n32=    if ($isid) return %s
n33=  }
n34=  else $iif($isid,return,echo -a Invalid input, us as: /mysocket <command> <link>)
n35=}
n36=
n37=alias -l mysocket.t if ($sock($1).lr > 30) { $hget($1,command) $1 error open Connection timeout | mysocket.k $1 }
n38=
n39=alias -l mysocket.k hfree -w $1 | sockclose $1 | .timermysocket. $+ $1 off | .remove $1 | unset %c.t
n40=
n41=on *:sockopen:*.mysocket: {
n42=  tokenize 32 $sockname
n43=  if ($sockerr) mysocket.e $1 open
n44=  else {
n45=    sockwrite -tn $1 GET $hget($1,path) HTTP/1.1
n46=    sockwrite -tn $1 Host: $hget($1,host)
n47=    sockwrite -tn $1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:44.0) Gecko/20100101 Firefox/45.0
n48=    sockwrite -tn $1 Accept: text/html
n49=    sockwrite -tn $1 Connection: close
n50=    sockwrite -t $1 $crlf
n51=  }
n52=}
n53=
n54=on *:sockread:*.mysocket: {
n55=  tokenize 32 $sockname
n56=  if ($sockerr) mysocket.e $1 read
n57=  elseif ($hget($1,r)) mysocket.r $1
n58=  else {
n59=    sockread -f %c.t
n60=    while ($sockbr > 2) { hadd $1 %c.t | sockread -f %c.t }
n61=    if ($sockbr) { hadd $1 r $calc($sock($1).rcvd +$iif($hget($1,Content-Length:) <= $hget($1,limit),$v1,$v2)) | if ($sock($1).rq) mysocket.r $1 }
n62=  }
n63=}
n64=
n65=on *:sockclose:*.mysocket:mysocket.d $sockname
n66=
n67=alias -l mysocket.r sockread $sock($1).rq &b | bwrite $1 -1 &b | if ($sock($1).rcvd >= $hget($1,r)) mysocket.d $1
n68=
n69=alias -l mysocket.e $hget($1,command) $1 error $2 $sockerr $sock($1).wsmsg | mysocket.k $1
n70=
n71=alias -l mysocket.d {
n72=  if ($hget($1,Transfer-Encoding:) == chunked) {
n73=    var %y = 1
n74=    bread $1 0 $file($1).size &f
n75=    while ($bfind(&f,%y,$crlf).text) {
n76=      var %v = $v1,%h $bvar(&f,%y,$calc(%v -%y)).text,%r $base(%h,16,10),%y $calc(%v +4+%r)
n77=      if (%r == 0) break
n78=      else bcopy &mysocket $calc(1+$bvar(&mysocket,0)) &f $calc(2+%v) %r
n79=    }
n80=  }
n81=  else bread $1 0 $file($1).size &mysocket
n82=  if ($hget($1,HTTP/1.1) != 200 OK) $hget($1,command) $1 error status $v1
n83=  else $hget($1,command) $1 $iif($bvar(&mysocket,0),done,error read No data received.)
n84=  mysocket.k $1
n85=  :error
n86=  if ($error) mysocket.k $1
n87=}
